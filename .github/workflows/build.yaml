name: Build

on:
  push:

jobs:
  build-docker:
    name: Docker
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      # contents: read
      packages: write
      # id-token: write

    outputs:
      image: ${{ steps.meta.outcome == 'success' && fromJSON(steps.meta.outputs.json).tags[0] }}@${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      # with:
      #   token: ${{ secrets.GH_USER_SWAG_BOT }}

    - name: Setup
      id: config
      uses: actions/github-script@v7
      env:
        GITHUB_REF_NAME: ${{ github.ref_name }}
      with:
        script: |-
          const {
            GITHUB_REF_NAME: ref_name,
          } = process.env

          core.setOutput('nproc', require('os').cpus().length * 2 + 1)
          core.setOutput('ref_name', ref_name)
          core.setOutput('ref_name_slug', ref_name.replace(/[/_\.\+]/g, '-'))
          core.setOutput('push_to_registry', Boolean(ref_name.match(/^(master|release|hotfix|feature\/ci)$/)))
          core.setOutput('version', context.sha.slice(0, 7))

    - name: Setup - buildx
      id: setup-buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup - Github Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Setup - Docker image metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
        tags: |
          type=sha,priority=1000
          type=raw,${{ steps.config.outputs.ref_name }},enable=${{ steps.config.outputs.ref_name != github.ref_name }}

    - name: Build
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        push: ${{ steps.config.outputs.push_to_registry == 'true' }}
        labels: ${{ steps.meta.outputs.labels }}
        tags: ${{ steps.meta.outputs.tags }}
        # build-args: |
        #   MAKEFLAGS=-j${{ steps.config.outputs.nproc }}
        #   sentry_release=${{ steps.config.outputs.version }}
        cache-from: type=gha,compression=zstd
        cache-to: type=gha,mode=max
